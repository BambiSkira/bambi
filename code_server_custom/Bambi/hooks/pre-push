#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
# Bambi deploy hook
#

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
from subprocess import Popen, PIPE
import json
import yaml

with open("../../.startup/config.yaml") as f:
    config = yaml.load(f)
prod_branch = config["config"]["project"]["prod_cluster"]["git_branch"].strip()
dev_branch = config["config"]["project"]["dev_cluster"]["git_branch"].strip()
prod_clust = config["config"]["project"]["prod_cluster"]["name"].strip()
dev_clust = config["config"]["project"]["dev_cluster"]["name"].strip()

process = Popen(['git', 'symbolic-ref', '--short', 'HEAD'],
                stdout=PIPE, stderr=PIPE)  # check if image is already pushed
stdout, stderr = process.communicate()
branch = stdout.decode("utf-8").strip()
extratag = None
if branch == prod_branch:
    pass
    Popen(['gcloud', 'container', 'clusters', 'get-credentials', prod_clust],
          stdout=PIPE, stderr=PIPE)  # check if image is already pushed
    extratag = "master"
    # check
    # checkout
elif branch == dev_branch:
    pass
    Popen(['gcloud', 'container', 'clusters', 'get-credentials', dev_clust],
          stdout=PIPE, stderr=PIPE)  # check if image is already pushed

    # check
    # checkout
else:
    print("branch not recognised will skip")
    exit(0)
# if a service has no tag it is assumed to not have been changed during this commit
services = [service for service in config["services"].keys(
) if config["services"][service]["latest_tag"] != ""]
print(services)
# check is latest tag exist, most likley not, push to that tag.
# TODO clean to have only X latest images.
# TODO assert that all commands succed
for service in services:
    # wanted image to deploy
    image = 'gcr.io/' + config["config"]["project"]["id"] + '/' + service
    tag = ':' + config["services"][service]["latest_tag"]
    process = Popen(['gcloud', 'container', 'images', 'describe', image+tag],
                    stdout=PIPE, stderr=PIPE)  # check if image is already pushed
    stdout, stderr = process.communicate()
    if stderr:
        print("push")
        # TODO do in parrallel if multiple
        process = Popen(['docker', 'push', image+tag],
                        stdout=PIPE, stderr=PIPE)
        stdout, stderr = process.communicate()
        process.wait()

    # cleanup delete so only the latest image exist
    p1 = Popen(['gcloud', 'container', 'images',
                'list-tags', image], stdout=PIPE, stderr=PIPE)
    p2 = Popen(['sed', '-n', '4,100p', ],
               stdin=p1.stdout, stdout=PIPE, stderr=PIPE)
    p3 = Popen(['awk', '{print $2}'], stdin=p2.stdout,
               stdout=PIPE, stderr=PIPE)
    stdout, stderr = p3.communicate()
    for t in stdout.decode('utf-8').split():
        # change this depending on branch
        if "master" not in t:
            Popen(['gcloud', 'container', 'images', 'delete',
                   image+':'+t], stdout=PIPE, stderr=PIPE)

    process = Popen(['kubectl', 'set', 'image', 'deployment/'+service,
                     service+'='+image+tag], stdout=PIPE, stderr=PIPE)  # swap image
    stdout, stderr = process.communicate()
    if stderr:
        print(stderr, "failed to set image")
        exit(1)
# if amazon
    # switch kluster
    # process = Popen(['kubectl', 'set', 'image', 'deployment/'+service, service+'='+image], stdout=PIPE, stderr=PIPE) #swap image
